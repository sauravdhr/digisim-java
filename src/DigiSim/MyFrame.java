
package DigiSim;

import dlds.Consta;
import Devices.Gates;
import Devices.Led;
import Devices.LogicGates.*;
import Devices.Switch;
import Devices.Wire;
import javax.swing.*;
import java.awt.*;
import java.awt.Color;

import java.io.*;
import java.util.Vector;


public class MyFrame extends JFrame implements Serializable{
    int device=Consta.NONE;
    int x=0,limit = 200;
    Object o;
    Graphics gw;
    AndGate and = new AndGate();
    OrGate or = new OrGate();
    NandGate nand = new NandGate();
    NorGate nor = new NorGate();
    XorGate xor = new XorGate();
    XnorGate xnor = new XnorGate();
    NotGate not = new NotGate();
    Wire wire = new Wire();
    Switch switcher = new Switch();
    Led led = new Led();
    
    public static Board board[][];
    int mouseMoveX,mouseMoveY,pin=2;
    int mouseX,mouseY;
    
    public static  Vector deviceList=new Vector(20, 10);
    public static  Vector undoList=new Vector(20, 10);
    
    public Point dragged = new Point(),released = new Point(),pressed = new Point(),moved  = new Point();
    public class myPanel extends JPanel{
        
        public void paint(Graphics g){
            super.paint(g);
            for(int i=0;i<limit/1;i++){
                for(int j=0;j<limit/1;j++){                   
                    g.fillRect(board[i][j].midx, board[i][j].midy, 1,1);
                }   
            }
            g.setColor(Color.GRAY);
            switch(device){
                case Consta.AND:
                    and.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.OR:
                    or.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.NOT:
                    not.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.XOR:
                    xor.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.NAND:
                    nand.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.NOR:
                    nor.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.XNOR:
                    xnor.draw(g, mouseMoveX, mouseMoveY,pin);
                    break;
                case Consta.WIRE:
                    g.fillRect(mouseMoveX-2,mouseMoveY-2, 4, 4);
                    wire.draw(g,pressed,dragged);
                    if (dragged.x>0 && dragged.y>0)
                        g.fillRect(dragged.x-2,dragged.y-2, 4, 4);
                    
                    break;
                case Consta.SWITCH:
                    switcher.draw(g,mouseMoveX,mouseMoveY);
                    break;
                case Consta.LED:
                    led.draw(g,mouseMoveX,mouseMoveY);
                    break;
            }
            Draw(g);
        }
        
    }
    public MyFrame() {
        initComponents();
        board=new Board[limit][limit];
        for(int i=0;i<limit;i++){
            for(int j=0;j<limit;j++){
                board[i][j]=new Board(i,j);
                board[i][j].value=Consta.Undefined;
            }
        }
        drawingPanel.setBackground(Color.WHITE);
    }
    public int getDevice(){
        return device;
    }
    void initButtons(){
        drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        notButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/not.gif")));
        orButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/or.gif")));
        andButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/and.gif")));
        xorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xor.gif")));
        xnorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xnor.gif")));
        norButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nor.gif")));
        nandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nand.gif")));
        ledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/led.gif")));
        switchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/switch.gif")));
        wireButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wire.gif")));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        drawingPanel = new myPanel();
        Undo = new javax.swing.JMenuItem();
        andButton = new javax.swing.JButton();
        Redo = new javax.swing.JMenuItem();
        notButton = new javax.swing.JButton();
        orButton = new javax.swing.JButton();
        xorButton = new javax.swing.JButton();
        xnorButton = new javax.swing.JButton();
        nandButton = new javax.swing.JButton();
        norButton = new javax.swing.JButton();
        ledButton = new javax.swing.JButton();
        switchButton = new javax.swing.JButton();
        wireButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        EditMenu = new javax.swing.JMenu();
        Clear = new javax.swing.JMenuItem();
        New = new javax.swing.JMenuItem();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Close = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digital Logic Simulator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(400, 600));
        
        //jPanel1.setBackground(color.WHITE);
        drawingPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        drawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                drawingPanelMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawingPanelMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawingPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanelMousePressed(evt);
            }
        });
        
        drawingPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawingPanelMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout drawingPanelLayout = new javax.swing.GroupLayout(drawingPanel);
        drawingPanel.setLayout(drawingPanelLayout);
        drawingPanelLayout.setHorizontalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        drawingPanelLayout.setVerticalGroup(
            drawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        andButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/and.gif"))); // NOI18N
        andButton.setToolTipText("AND gate");
        andButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                andButtonActionPerformed(evt);
            }
        });

        notButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/not.gif"))); // NOI18N
        notButton.setToolTipText("NOT gate");
        
        notButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notButtonActionPerformed(evt);
            }
        });

        orButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/or.gif"))); // NOI18N
        orButton.setToolTipText("OR gate");
        orButton.setMaximumSize(new java.awt.Dimension(53, 23));
        orButton.setMinimumSize(new java.awt.Dimension(53, 23));
        orButton.setPreferredSize(new java.awt.Dimension(53, 23));
        orButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orButtonActionPerformed(evt);
            }
        });
        xorButton.setToolTipText("XOR gate");
        xorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xor.gif"))); // NOI18N
        xorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xorButtonActionPerformed(evt);
            }
        });
        xnorButton.setToolTipText("XNOR Gate");
        xnorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xnor.gif"))); // NOI18N
        xnorButton.setMaximumSize(new java.awt.Dimension(53, 23));
        xnorButton.setMinimumSize(new java.awt.Dimension(53, 23));
        xnorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xnorButtonActionPerformed(evt);
            }
        });
        nandButton.setToolTipText("NAND gate");
        nandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nand.gif"))); // NOI18N
        nandButton.setMaximumSize(new java.awt.Dimension(53, 23));
        nandButton.setMinimumSize(new java.awt.Dimension(53, 23));
        nandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nandButtonActionPerformed(evt);
            }
        });
        norButton.setToolTipText("NOR gate");
        norButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nor.gif"))); // NOI18N
        norButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                norButtonActionPerformed(evt);
            }
        });
        wireButton.setToolTipText("Wire");
        wireButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wire.gif"))); // NOI18N
        wireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wireButtonActionPerformed(evt);
            }
        });
        switchButton.setToolTipText("Switch/Input");
        switchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/switch.gif"))); // NOI18N
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });
        ledButton.setToolTipText("Led/Output");
        ledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/led.gif"))); // NOI18N
        ledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledButtonActionPerformed(evt);
            }
        });
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Input Lines");

        jLabel2.setText("Gates:");

        FileMenu.setText("File");
        jMenuBar1.add(FileMenu);
        
        Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        Undo.setText("Undo");
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });
        EditMenu.add(Undo);
        Clear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        EditMenu.add(Clear);
        Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        Redo.setText("Redo");
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });
        EditMenu.add(Redo);
        
        EditMenu.setText("Edit");
        New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        FileMenu.add(New);

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        FileMenu.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        FileMenu.add(Save);

        Close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Close.setText("Exit");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        FileMenu.add(Close);
        jMenuBar1.add(EditMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(andButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(xorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(notButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(norButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGap(24, 24, 24)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(wireButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(switchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(nandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(xnorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ledButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(andButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(xorButton)
                    .addComponent(orButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(xnorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(norButton)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wireButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ledButton)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(switchButton))
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
    void update(){
        for(int i=0; i<deviceList.size();i++){
            o=deviceList.get(i);
            if(o instanceof Switch){
                Switch sw=(Switch)o;
                sw.update(board);
            }
        }
        for(int j=0; j<deviceList.size()+1; j++)
        for(int i=0; i<deviceList.size();i++){
            o=deviceList.get(i);
            if(o instanceof AndGate){
                AndGate temp=(AndGate)o;
                temp.update(board);
            }
            else if(o instanceof Wire){
                 Wire w=(Wire)o;
                 w.update(board);
            }
            else if(o instanceof NandGate){
                 NandGate temp=(NandGate)o;
                 temp.update(board);
            }
            else if(o instanceof OrGate){
                 OrGate temp=(OrGate)o;
                 temp.update(board);
            }
            else if(o instanceof NorGate){
                  NorGate temp=(NorGate)o;
                 temp.update(board);
            }
            else if(o instanceof XorGate){
                 XorGate temp=(XorGate)o;
                 temp.update(board);
           }
           else if(o instanceof XnorGate){
               XnorGate temp=(XnorGate)o;
               temp.update(board);
           }
           else if(o instanceof NotGate){
               NotGate temp=(NotGate)o;
               temp.update(board);
           }
           else if(o instanceof Led){
               Led temp=(Led)o;
               temp.update(board);
           }
        }
    }
    void Draw(Graphics g){
        
        for (int i=0;i<deviceList.size();i++){
            o = deviceList.get(i);
            if (o instanceof AndGate){
                g.setColor(Color.BLACK);
                AndGate temp = (AndGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof OrGate){
                g.setColor(Color.BLACK);
                OrGate temp = (OrGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof NotGate){
                g.setColor(Color.BLACK);
                NotGate temp = (NotGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof NorGate){
                g.setColor(Color.BLACK);
                NorGate temp = (NorGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof NandGate){
                g.setColor(Color.BLACK);
                NandGate temp = (NandGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof XorGate){
                g.setColor(Color.BLACK);
                XorGate temp = (XorGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof XnorGate){
                g.setColor(Color.BLACK);
                XnorGate temp = (XnorGate)o;
                temp.update(board);
                temp.draw(g,temp.getPosX(), temp.getPosY(), temp.getPosPin());
            }
            if (o instanceof Wire){
                g.setColor(Color.BLACK);
                Wire temp = (Wire)o;
                temp.update(board);
                temp.draw(g,temp.getStartPoint(),temp.getEndPoint());
            }
            if (o instanceof Switch){
                g.setColor(Color.BLACK);
                Switch temp = (Switch)o;
                temp.update(board);
                temp.draw(g,temp.GetRefx(),temp.GetRefy());
               
            }
            if (o instanceof Led){
                g.setColor(Color.BLACK);
                Led temp = (Led)o;
                temp.update(board);
                temp.draw(g,temp.getX(),temp.getY());
               
            }
        }
        
    }
    
    private void notButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if (device == Consta.NOT){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            notButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/not_2.gif")));
            device = Consta.NOT;
        }      
    } 
    private void UndoActionPerformed(java.awt.event.ActionEvent evt){
        update();
        if (deviceList.size()>0){
            undoList.add(deviceList.get(deviceList.size()-1));
            deviceList.removeElementAt(deviceList.size()-1);
        }
        update();
        drawingPanel.repaint();
    }
    private void NewActionPerformed(java.awt.event.ActionEvent evt) {                                    
      
        Filer f = new Filer();
        f.New(this);
    }                                   

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {                                     
        Filer f=new Filer();
        try {
            f.open(this);
        } 
        catch (FileNotFoundException ex) {   
	}
        catch (IOException ex) {
        }
        catch (ClassNotFoundException ex) {
        }
    }                                    

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {                                     
        
        Filer f = new Filer();
        f.save(this);
        
    }                                    

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {                                      
      
        Filer f = new Filer();
        f.exit(this);
        
    }
    private void RedoActionPerformed(java.awt.event.ActionEvent evt) {                                     
         if (undoList.size()>0){
             deviceList.add(undoList.get(undoList.size()-1));
            undoList.removeElementAt(undoList.size()-1);   
         }
        update();
        drawingPanel.repaint();
    }
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {                                      
     
        deviceList.clear();
        undoList.clear();
        update();
        drawingPanel.repaint();
    }
    private void xnorButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
        if (device == Consta.XNOR){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            xnorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xnor_2.gif")));
            device = Consta.XNOR;
        }

    }                                          
    private void ledButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        
        if (device == Consta.LED){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            ledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/led_s.gif")));
            device = Consta.LED;
        }
    }  
    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
      
        if (device == Consta.SWITCH){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            switchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/switch_s.gif")));
            device = Consta.SWITCH;
        }
    }
    private void wireButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
       
        pressed = dragged = new Point(0,0);
      
        if (device == Consta.WIRE){
            initButtons();
            drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            device = Consta.NONE;
        }
        else {
            initButtons();
            wireButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wire2.gif")));
            drawingPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
            device = Consta.WIRE;
        }
    }
    private void nandButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (device == Consta.NAND){
            initButtons();
            device = Consta.NAND;
        }
        else {
            initButtons();
            nandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nand_2.gif")));
            device = Consta.NAND;
        }
    }                                          

    private void norButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
       
        if (device == Consta.NOR){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            norButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/nor_2.gif")));
            device = Consta.NOR;
        }
    }                                         

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void andButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
       
        if (device == Consta.AND){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            andButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/and_2.gif")));
            device = Consta.AND;
        }
    }                                         
    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {
// TODO add your handling code here:
    String s = (String)evt.getItem();
        switch (s) {
            case "2":
                pin=2;
                break;
            case "3":
                pin =3;
                break;
            case "5":
                pin=5;
                break;
            case "4":
                pin=4;
                break;
        }
    }
    
    private void xorButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if (device == Consta.XOR){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            xorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/xor_2.gif")));
            device = Consta.XOR;
        }
    }                                         

    private void orButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        if (device == Consta.OR){
            initButtons();
            device = Consta.NONE;
        }
        else {
            initButtons();
            orButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gates/or_2.gif")));
            device = Consta.OR;
        }
        

    }                                                                              
    private void drawingPanelMouseClicked(java.awt.event.MouseEvent evt) {                                       
     
        Point p = evt.getPoint();
        PinPointer pq = new PinPointer(p.x,p.y);
        Indexer i = pq.toIndex();
        drawingPanel.repaint();
        
    }
    
    private void drawingPanelMouseEntered(java.awt.event.MouseEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void drawingPanelMouseMoved(java.awt.event.MouseEvent evt) {                                        
        
        mouseMoveX = evt.getX();
        mouseMoveY = evt.getY();
        moved = evt.getPoint();
        PinPointer mover = new PinPointer(moved.x,moved.y);
        moved  = new Point(mover.toMid().x,mover.toMid().y);
        mouseMoveX = moved.x;
        mouseMoveY = moved.y;
        drawingPanel.repaint();
        
    }
    private void drawingPanelMousePressed(java.awt.event.MouseEvent evt) {                                          
        
        pressed = evt.getPoint();
        PinPointer presser = new PinPointer(pressed.x,pressed.y);
        pressed  = new Point(presser.toMid().x,presser.toMid().y);
        dragged = released = pressed;
        drawingPanel.repaint();
    }                                         

    private void drawingPanelMouseDragged(java.awt.event.MouseEvent evt) {                                          
             
        dragged = evt.getPoint();
       
        PinPointer dragger = new PinPointer(dragged.x,dragged.y);
        dragged  = new Point(dragger.toMid().x,dragger.toMid().y);
        drawingPanel.repaint();
    } 
    private void drawingPanelMouseReleased(java.awt.event.MouseEvent evt) {
        mouseX = evt.getX();
        mouseY = evt.getY();
        released = evt.getPoint();
        PinPointer t = new PinPointer(released);
        released = new Point(t.toMid().x,t.toMid().y);
        mouseX = released.x;
        mouseY = released.y;
        Object tempo;
        
        if (SwingUtilities.isRightMouseButton(evt)){
            device = Consta.NONE;
            initButtons();
        }
        
        switch(device){
            case Consta.AND:
                tempo = new AndGate(mouseX,mouseY,pin);
                deviceList.add(tempo);
                break;
            case Consta.OR:
                tempo = new OrGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.NOT:
                tempo = new NotGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.NAND:
                tempo = new NandGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.NOR:
                tempo = new NorGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.XOR:
                tempo = new XorGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.XNOR:
                tempo = new XnorGate(mouseX,mouseY,pin);
                deviceList.add(tempo); 
                break;
            case Consta.WIRE:
                tempo = new Wire(pressed,dragged);
                deviceList.add(tempo);
                break;
            case Consta.SWITCH:
                tempo = new Switch(released.x,released.y);
                deviceList.add(tempo);
                break;
            case Consta.LED:
                tempo = new Led(released.x,released.y,board);
                deviceList.add(tempo);
               break;
            case Consta.NONE:
                for(int i=0; i<deviceList.size();i++){
                    o=deviceList.get(i);
                    if(o instanceof Switch){
                        Switch tp=(Switch)o;
                        if(released.x<tp.GetRefx()&&released.x>tp.GetRefx()- 20  &&  released.y>tp.GetRefy()-10&&released.y<10+tp.GetRefy() ){
                            tp.toggle();
                            tp.update(board);  
                           
                        }
                        
                }
            }
            break;
        }        
        pressed  = dragged = new Point(0,0);
        for(int i=0; i<limit; i++)
            for(int j=0; j<limit; j++)
                board[i][j].value=Consta.Undefined;
        
        for(int i=0; i<deviceList.size();i++){
            o=deviceList.get(i);
            if(o instanceof Switch){
                  Switch sw=(Switch)o;
                  sw.update(board);      
            }
        }
        for(int i=0; i<deviceList.size();i++){
            o=deviceList.get(i);
            if(o instanceof AndGate){
                AndGate temp=(AndGate)o;
                temp.update(board);
            }
            else if(o instanceof Wire){
                Wire w=(Wire)o;
                w.update(board);
            }
            else if(o instanceof OrGate){
                OrGate temp=(OrGate)o;
                temp.update(board);
            }
            else if(o instanceof NotGate){
                NotGate temp=(NotGate)o;
                temp.update(board);
            }
            else if(o instanceof NandGate){
                NandGate temp=(NandGate)o;
                temp.update(board);
            }
            else if(o instanceof NorGate){
                NorGate temp=(NorGate)o;
                temp.update(board);
            }
            else if(o instanceof XorGate){
                XorGate temp=(XorGate)o;
                temp.update(board);
            }
            else if(o instanceof XnorGate){
                XnorGate temp=(XnorGate)o;
                temp.update(board);
            }
        }
        update();
       // Draw(gw);
        drawingPanel.repaint();
    }
    
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run(){
                new MyFrame().setVisible(true);
                
            }
        });
    }
                     
    private javax.swing.JButton andButton;
    private javax.swing.JMenuItem Redo;
    private myPanel drawingPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Close;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton nandButton;
    private javax.swing.JButton norButton;
    private javax.swing.JButton notButton;
    private javax.swing.JButton orButton;
    private javax.swing.JButton xnorButton;
    private javax.swing.JButton xorButton;
    private javax.swing.JButton ledButton;
    private javax.swing.JButton switchButton;
    private javax.swing.JButton wireButton;
    private javax.swing.JMenuItem Clear;
    // End of variables declaration                   
}
